openapi: '3.0.2'
info:
  title: GNCS
  version: '1.0'

servers:
  - url: https://api.server.test/v1

tags:
  - name: Auth
    description: Auth Route
  - name: Event
    description: Event Route

paths:
  /api/health:
    get:
      tags:
        - Other
      responses:
        '200':
          description: OK

  /api/auth/login:
    post:
      tags:
        - Auth
      description: ''
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/userLoginBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/UserNotFound'
  
  /api/auth/register:
    post:
      tags:
        - Auth
      description: ''
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/userLoginBody'
      responses:
        '200':
          description: OK
  /api/events:
    get:
      tags:
        - Event
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Event
      description: Create a new Event
      requestBody:
        $ref: '#/components/requestBodies/createEventBody'
      responses:
        '201':
          $ref: '#/components/schemas/Event'

  /api/events/{id}:
    get:
      tags:
        - Event
      description: Get Event by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Event ID
          example: 1
      responses:
        '200':
          description: Successful fetch a Event by ID 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    
    patch:
      tags:
        - Event
      description: Update a Event by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Event ID
          example: 1
      requestBody:
        $ref: '#/components/requestBodies/createEventBody'
      responses:
        '200':
          description: Successful fetch a Event by ID 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    
    delete:
      tags:
        - Event
      description: Delete a Event by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Event ID
          example: 1
      responses:
        '204':
          description: Delete Event successful.
          

components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    Event:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: Fake Test Event
          description: This Event name has to unique
        description:
          type: string
          description: The Information for the Event
          example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
        prePayment:
          type: number
          example: 12.00
        boxOffice:
          type: number
          example: 15.00
        
    Token:
      type: object
      properties:
        type:
          type: string
          enum: [bearer]
        token:
          type: string
          example: Mw._LnnFavm-Nbxxsy4cZVZFo9B4AhGc6ITdC1eEElu0W__S1b9vDXNUk6RKG7R
        expires_at:
          type: string
          format: date-time

    ApiError:
      type: object
      properties:
        errors:
          type: array
          
  responses:
    UserNotFound:
      description: Bad Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiError'
            properties:
              errors:
                type: array
                items:
                  oneOf:
                  - type: object
                    description: User not found in database
                    properties:
                      message:
                        type: string
                        example: 'E_INVALID_AUTH_UID: User not found'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: 'E_INVALID_AUTH_PASSWORD: Password mis-match'




  requestBodies:
    userLoginBody:
      content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              example:
                email: fake.email@mail.com
                password: password1
    createEventBody:
      description: Successful create a new Event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'

